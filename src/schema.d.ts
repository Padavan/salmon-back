/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/boards": {
    /**
     * List of all boards
     * @description Add a new pet to the store
     */
    get: operations["getBoardList"];
  };
  "/board/threads": {
    /**
     * Get all thread for boards
     * @description Multiple status values can be provided with comma separated strings
     */
    get: operations["getThreadList"];
  };
  "/board/thread/create": {
    /**
     * Create thread
     * @description Create thread based on title and text
     */
    post: operations["createThread"];
  };
  "/board/thread/{threadId}/posts": {
    /**
     * Find pet by ID
     * @description Returns a single pet
     */
    get: operations["getPostList"];
  };
  "/board/thread/{threadId}/post/create": {
    /** uploads an image */
    post: operations["createPost"];
  };
  "/authtoken": {
    /**
     * Authenticate
     * @description Get some kind of token to allow posting
     */
    post: operations["authenticatePost"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    Thread: {
      /** Format: int64 */
      threadId?: number;
      /** Format: date-time */
      createdAt?: string;
      title?: string;
      text?: string;
      /** @enum {string} */
      status?: "flagged";
      complete?: boolean;
    };
    NewThread: {
      title?: string;
      text?: string;
    };
    Post: {
      /** Format: int64 */
      postId?: number;
      /** Format: int64 */
      threadId?: number;
      text?: string;
      /** Format: date-time */
      createdAt?: string;
    };
    NewPost: {
      text?: string;
    };
    Credentials: {
      auth?: string;
    };
    ApiResponse: {
      /** Format: int32 */
      code?: number;
      type?: string;
      message?: string;
    };
    Board: {
      name?: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /**
   * List of all boards
   * @description Add a new pet to the store
   */
  getBoardList: {
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          "application/json": components["schemas"]["Board"][];
        };
      };
      /** @description Invalid input */
      400: {
        content: never;
      };
      /** @description Validation exception */
      422: {
        content: never;
      };
    };
  };
  /**
   * Get all thread for boards
   * @description Multiple status values can be provided with comma separated strings
   */
  getThreadList: {
    responses: {
      /** @description successful operation */
      200: {
        content: {
          "application/json": components["schemas"]["Thread"][];
        };
      };
      /** @description Invalid status value */
      400: {
        content: never;
      };
    };
  };
  /**
   * Create thread
   * @description Create thread based on title and text
   */
  createThread: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["NewThread"];
      };
    };
    responses: {
      /** @description successful operation */
      200: {
        content: {
          "application/json": components["schemas"]["Post"][];
        };
      };
      /** @description Invalid tag value */
      400: {
        content: never;
      };
    };
  };
  /**
   * Find pet by ID
   * @description Returns a single pet
   */
  getPostList: {
    parameters: {
      path: {
        /** @description ID of pet to return */
        threadId: number;
      };
    };
    responses: {
      /** @description successful operation */
      200: {
        content: {
          "application/json": components["schemas"]["Post"][];
        };
      };
      /** @description Invalid ID supplied */
      400: {
        content: never;
      };
      /** @description Pet not found */
      404: {
        content: never;
      };
    };
  };
  /** uploads an image */
  createPost: {
    parameters: {
      path: {
        /** @description ID of pet to update */
        threadId: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["NewPost"];
      };
    };
    responses: {
      /** @description successful operation */
      200: {
        content: {
          "application/json": components["schemas"]["Post"];
        };
      };
    };
  };
  /**
   * Authenticate
   * @description Get some kind of token to allow posting
   */
  authenticatePost: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Credentials"];
      };
    };
    responses: {
      /** @description successful operation */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResponse"];
        };
      };
      /** @description Invalid input */
      400: {
        content: never;
      };
      /** @description Validation exception */
      422: {
        content: never;
      };
    };
  };
}
